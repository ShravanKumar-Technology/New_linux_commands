sudo apt-get install git
#to install git.

git --version 

git config --global user.name "username"
#enter username

git congfig --global user.email "email@address.com"
#enter email address

git config --global --list
# to get username and email and address.

cat .gitconfig
# to see inside the file .gitconfig.

pwd
#present working directory. 

git init --directory-name--
# Creates a new directory for project files which also acts as git repository.

old-directory~$ git init
# this command makes old-directory into git repository.

git clone ---repository address--
# to clone repository to local directory.

git status
# to get status of files in current directory, shows file that are recently modified.
its going to tell status between those three different trees.
 
git add -filename-
# adds file to staging area.

git add .
# git recursively adds any or all modified files to staging area.

git reset HEAD -filename-
# too unstage file from staging area.

git checkout -- -filename-
# to undo changes in directory. 

git commit -m "comment"
# moves modified files from staging area to git repository.

git commit -am "comment"
# adds and commits at the same time. 

git push -u origin master
# update the file to master directory.
-------------------------------------------
git log
# to show log or when files where add to git repository.

git help log
# to show options for git log.

git log --oneline
# it compresses log in one line list.


git log --oneline -3
# it compresses log in one line list. it shows only three commits.


git log --oneline --graph --decorate --color
# example to git log command.

git log -n 1
# it limits the number of logs shown. here it only shows 1 commit.

git log --since=2019-12-10
# it shows commit made from date specified.

git log --until=2019-12-11
# it shows commit made until date specified.

git log --author="joe"
# it shows commits made by specific author, you can use part of the name too.

git log --grep="Init"
# it searchs for regular expression specified. 

git log -p
# show diff in commits. it is patch option.

git log --stat --summary
# it will show statstics in what changed in each commit.

git log --format=oneline
# it shows full sha1 and commits.

git log --format=short
# it shows short sha1 and commits.

git log --format=full
# it shows full sha1 and commits.

git log --format=fuller
# it shows more info on sha1 and commits.


git log --format=email
# it shows full sha1 and commits in email format.

git log --format=raw
# it shows full sha1 and commits.

git log --graph
# it shows graph commit.

git log --oneline --graph --decorate
#show log info 

git show sha1
# it shows what changed in given commit.

git show --format=oneline HEAD
git show --format=oneline HEAD^
git show --format=oneline HEAD^^
git show --format=oneline HEAD~3
git help show
#these are used to navigate around commits.

git show filename  ---> this command will not work, you have to pass some other reference to commit. like sha1.

-------------------------------------------

git rm -filename-
# to remove file from git repository. you have to commit changes after this command to make removal permenant.
it also moves deleted file process to staging area.

mkdir -new_directory_name-
# creates new directory name.

git mv -file_name- -directory_name-
# moves file to directory specfied. after this command you have to commit to make changes permenant.


git mv -filename- -renamedfile_name-
# renames file name and moves to staging area, you have to commit after this.




* A "commit" is a group of saved changes to git repository, impacts history, and is uniquly identified by sha1 hash.

* Branch is timeline for commits, master is main branch and default branch.

* Head is pointer to last commit.


git push -u origin master
#pushesh all changes in file to remote repository. -u is used when first file is pushed.


---------------------------------------
good practice.

git pull origin master
* it is good practice to pull and merge remote repository and checking for any changes before pushing your update.

git push origin master
* too update any changes made by you to remote repository.
---------------------------------------


* working directory( init) ----> local staging area(add)---> git repository(commit)----> push ---> remote directory(github). 


* git help # to get help.

* A separate file called .gitignore has to be created and that file can be used to contain file names ( one file name per line ) which would to ignored from  adding to git repository. ex:- add *.log to ignore files with log extension. You have to commit .gitignore file.

-------------------------------------
ssh:

1. create .ssh directory in home directory.

2. ssh-keygen -t rsa -C "email@address or user.name"

3. copy text inside id_rsa.pub and paste it in github ssh keystore.

4.  ssh -T git@github.com --> type in this command to access ssh from terminal.

if password is asked type in passprase earlyer asked 

------------------------------------

three different direcotries or trees , working directory, staging directory, and repository.

------------------------------------

git diff
# shows the changes made to the old file, it show difference between old and new version of same file.
it show this info on files in working directory.

git diff -filename-
# shows the difference between old and new version of the file of file name specified.

git diff --staged
# shows info on files in staged index. show diff in old and new version in same file.

git diff --color-words -filename-
# shows info in different way.

git diff sha1
# shows changes made on that perticular commit.

git diff sha1 filename
# shows changes made on that perticular commit on particular file.

git diff sha1_of_commit..sha1_of_diff_commit
#shows what changed between two different commits. things changed between two different snapshots.

git diff sha1_of_commit..sha1_of_diff_commit filename
#shows what changed between two different commits on particular file name. things changed between two different snapshots.

git diff --stat --summary sha1_of_commit..HEAD filename
#shows what changed between two different commits on particular file name. things changed between two different snapshots.

git diff --ignore-space-change sha1_of_commit..HEAD
#ignore space change.


git diff --ignore-all-space sha1_of_commit..HEAD
#ignore space change.

git diff -w sha1_of_commit..HEAD
#ignore all space change. we can also use -b.
------------------------------------
------------------------------------

pager:

f ---> move forward.
b ---> move backward.
minus+shift+s+return ---> to fold lines in pager.

------------------------------------
------------------------------------

undo changes in directory:

git checkout -filename- or git checkout -- -filename-      (two dashes with space is requied here).
# this undo's the changes in working directory. second command commands it be in current branch.

git reset HEAD -filename-
# it unstages the file from staging index. but doesn't change the changes made in working directory.

-------------------------
undoing changes in repository itself:

we can't undo changes in repostiory, but we can undo changes in last commit.by using "amend" command.
git commit --amend -m "message"            ----> changes message in last commit. here commit was already done.

-------------------------
blob is a file, tree is directory.

git ls-tree HEAD
*here HEAD is tree-ish, it will refer to the tip of the currently checked-out branch.

git ls-tree master^ directory-name 
*gives directory previous state.

tree-ish ---> part of tree, like a tree.---> tree-ish is a reference to a commit  

git ls-tree sha1-number
*give info on commit with given sha1 value.

-------------------------
=========================

#how to create branch

git branch
# shows how many branches are there in local machine.

git branch branch_name
# creates a new branch, you are still in master branch, you have not switched to new branch.

git checkout branch_name
# switches to new branch.

git checkout master
# switches back to branch master.   

## fast context switching.

git checkout -b new_branch_name
# creates a new branch and switches to that branch.

## your working directory must be clean in order to switch from current branch to another branch.
## your working directory must be mostly clean or have no conflicts to switch from current branch to another branch.

git diff master..new_branch
# difference between master and new_branch snapshots.
# the order of these doesn't matter, you can swap them easily.

git diff --color-words master..new_branch
# difference between master and new_branch snapshots. shows what changed between different commits.

git diff --color-words master..new_branch^
# difference between master and new_branch's parent snapshots. shows what changed between different commits.
# this command is tree-ish.

git branch --merged 
# show all the branch's completely included in current branch.

git branch -m new_branch new_name_of_branch
# renaming of branch. -m here is move. in git move is also renaming.

git branch -d branch_name_tobe_deleted
# this command deletes a branch. you can't delete a branch you are currently in. you can use -D option to delete commited branch.

git merge branch_name
# this command adds branch to master branch. you have to do it from being on master branch.

## always have clean working space 

git branch --merged 
# gives info on branches merged.










 









